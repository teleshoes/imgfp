#!/usr/bin/perl
use strict;
use warnings;

#Copyright 2022 Elliot Wolk
#License: GPLv3
#derived from:
#  findimagedupes
#  Copyright Â© 2006-2022 by Jonathan H N Chin <code@jhnc.org>.
#  https://github.com/jhnc/findimagedupes

use Graphics::Magick;
use File::MimeInfo::Magic qw(mimetype);
use MIME::Base64 qw(encode_base64);

sub fingerprint($$);

sub main(@){
  my $GM = Graphics::Magick->new;
  for my $file(@_){
    print encode_base64(fingerprint($GM, $file));
  }
}

#1) Read image.
#2) Resample to 160x160 to standardize size.
#3) Grayscale by reducing saturation.
#4) Blur a lot to get rid of noise.
#5) Normalize to spread out intensity as much as possible.
#6) Equalize to make image as contrasty as possible.
#7) Resample again down to 16x16.
#8) Reduce to 1bpp.
#9) The fingerprint is this raw image data.

sub fingerprint($$){
  my ($GM, $file) = @_;
  my $blob;

  @$GM = ();
  eval {
    if ((mimetype($file)||'') =~ /^(audio|video)/) {
      die("not fingerprinting A/V file: $file\n");
    }

    if (!$GM->Ping($file)) {
      die("not fingerprinting unknown-type file: $file\n");
    }

    my $error;
    $error = $GM->Read($file) unless $error;
    $error = $GM->Sample("160x160!") unless $error;
    $error = $GM->Modulate(saturation=>-100) unless $error;
    $error = $GM->Blur(radius=>3,sigma=>99) unless $error;
    $error = $GM->Normalize() unless $error;
    $error = $GM->Equalize() unless $error;
    $error = $GM->Sample("16x16") unless $error;
    $error = $GM->Threshold() unless $error;
    $error = $GM->Set(magick=>'mono') unless $error;
    die "ERROR: $error\n" if $error;

    ($blob) = $GM->ImageToBlob();
  };

  if($@){
    print STDERR "WARNING: imagemagick failed for $file\n$@\n";
    return undef;
  }else{
    return $blob;
  }
}

&main(@ARGV);
